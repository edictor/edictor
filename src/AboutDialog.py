# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue May 26 09:15:05 2009

import wx, __builtin__

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

class AboutDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AboutDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.bitmap_1 = wx.StaticBitmap(self, -1, wx.Bitmap(__builtin__.application_path + "/res/ab.jpg", wx.BITMAP_TYPE_ANY))
        self.htmlw_about = wx.html.HtmlWindow(self, -1, style=wx.SIMPLE_BORDER)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        self.Bind(wx.EVT_CLOSE, self.OnClose)
        self.Bind(wx.EVT_CHAR_HOOK, self.OnKeyDown)
        self.htmlw_about.SetFocus()
        self.Center()

    def __set_properties(self):
        # begin wxGlade: AboutDialog.__set_properties
        self.SetTitle(_("Sobre"))
        self.SetSize((779, 260))
        self.bitmap_1.SetMinSize((380, 253))
        self.htmlw_about.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.htmlw_about.SetScrollRate(10, 10)
        # end wxGlade

        self.htmlw_about.SetPage(u'''
        <p>
            <font color='blue'><strong>E-Dictor</strong></font><br>
            <small>v%s</small>
        </p>
        <p>
            E-Dictor is a tool for transcription and coding of text corpora in XML format, so it can be edited and used in many ways (as for
            linguistic analises - morphology, syntax, etc.). The XML tag set defined was meant to incorporate edition and POS information as well
            as text layout information (titles, subtitles, page/line/column breaks, header, footer, etc.).<br>
            <br>
            Home page: <a href='https://oncoto.dyndns.org:44883/projects/edictor/' target='_blank'>https://oncoto.dyndns.org:44883/projects/edictor/</a>
        </p>
        <p>
            <b>Authors:</b><br><br>
            Pablo Faria <pablofaria@gmail.com><br>
            Fábio Kepler <fabio.kepler@gmail.com><br>
            Maria C. Paixão e Souza <mariaclara.ps@gmail.com><br>
        </p>
        <p>
            This software is freely available under the terms of <b>MIT</b> public licence:<br>
            <br>
            <font color='gray'>
            Copyright © 2009 Pablo Faria<br>
            <br>
            Portions copyright Fábio Kepler e Maria C. Paixão e Souza.<br> 
            <br>
            Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:<br>
            <br>
            The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.<br>
            <br>
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
            </font>
        </p>
        '''%(__builtin__.version))

    def __do_layout(self):
        # begin wxGlade: AboutDialog.__do_layout
        sizer_60 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_60.Add(self.bitmap_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_60.Add(self.htmlw_about, 1, wx.ALL|wx.EXPAND, 2)
        self.SetSizer(sizer_60)
        self.Layout()
        # end wxGlade

    def OnClose(self, event):
        """
        Handles the user clicking the window/dialog "close" button/icon.
        """
        self.EndModal(wx.ID_CLOSE)

    def OnKeyDown(self, event):
        keycode = event.GetKeyCode()
        if keycode == wx.WXK_ESCAPE:
            self.Close(True)
        event.Skip()

# end of class AboutDialog


