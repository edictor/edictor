# -*- coding: utf-8 -*-

import time
import wx
import traceback
import os, sys, __builtin__
import difflib

#from MainFrame import MainFrame
import MainFrame, intl
from Graphy import Graphy

class TestFrame(wx.Dialog):
    def __init__(self, parent):
        # Set app language
        intl.setLanguage()
        wx.Dialog.__init__(self, parent, -1, "",
                           wx.DefaultPosition, wx.Size(400, 100))
        self.panel_1 = wx.Panel(self, -1)
        self.label_1 = wx.StaticText(self.panel_1, -1, _(u"Teste de mensagem."), style=wx.ALIGN_CENTRE)
        self.button_1 = wx.Button(self.panel_1, wx.ID_OK, "Ok")
        self.__set_properties()
        self.__do_layout()

    def __set_properties(self):
        self.SetTitle("E-Dictor")
        self.button_1.SetDefault()
        self.button_1.SetSize(wx.Size(80,30))

    def __do_layout(self):
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.label_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALL, 5)
        sizer_2.Add(self.button_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
    
    def setMessage(self, msg):
        self.label_1.SetLabel(msg)
        self.GetSizer().Fit(self)

class Test():
    '''
    This class will provide unit tests for all the features of
    E-Dictor. Each test unit will return True or False. They can
    be run isolated of each other or together (all tests).
    '''
    
    def __init__(self, main_frame):
        self.main_frame = main_frame
        self.dlg = TestFrame(self.main_frame)
        if os.path.exists('c:\\'):
            if not os.path.exists('c:\\temp'):
                os.mkdir('c:\\temp')
            self.tmp_dir = 'c:\\temp\\'
        else:
            self.tmp_dir = '/tmp/'
        self.output = open(self.tmp_dir + 'e-dictor.tests','w')
        self.diff = difflib.Differ()
    
    def runAllTests(self):
        self.dlg.setMessage(_(u'Serão executadas rotinas de testes do sistema.'))
        self.dlg.ShowModal()

        wx.BeginBusyCursor()

        self.main_frame.test_mode = True
        self.main_frame.active_text = 0
        
        if self.test001() and\
                self.test002() and self.test003() and self.test004():# and\
                #self.test005():
            wx.EndBusyCursor()

            self.output.close()

            self.dlg.setMessage(_(u'Rotinas executadas com sucesso. Ver resumo em ')+self.tmp_dir+'e-dictor.tests')
            self.dlg.ShowModal()

            # Reset E-Dictor interface (like a new restart)
            self.main_frame.text_ctrl_ocr.ChangeValue('')
            self.main_frame.graphy_text_html_window.SetPage('')
            self.main_frame.graphy = None
            self.main_frame.graphy_cell = None
            self.main_frame.graphy_word_editing = None
            self.main_frame.GetToolBar().ToggleTool(MainFrame.ID_ED_MODE, False)
            self.main_frame.ClearGraphyView()
            self.main_frame.test_mode = False

            return True

        wx.EndBusyCursor()

        self.output.close()

        # Reset E-Dictor interface (like a new restart)
        self.main_frame.text_ctrl_ocr.ChangeValue('')
        self.main_frame.graphy_text_html_window.SetPage('')
        self.main_frame.morpho_text_html_window.SetPage('')
        self.main_frame.graphy = None
        self.main_frame.graphy_cell = None
        self.main_frame.graphy_word_editing = None
        self.main_frame.GetToolBar().ToggleTool(MainFrame.ID_ED_MODE, False)
        self.main_frame.ClearGraphyView()
        self.main_frame.test_mode = False

        self.dlg.setMessage(_(u'Houve problema na execução dos testes. Ver resumo em ')+self.tmp_dir+'e-dictor.tests')
        self.dlg.ShowModal()

        return False
    
    def test001(self):
        '''
        Check the routine of inserting pure text in the "Reprodução"
        tab, transforming it to a XML structure, saving it and 
        opening it again.
        '''
        try:
            # Expected output files content 
            txt_expected ='''Test unit 001

It must generate two paragraphs.
The second with two sentences xxx.'''

            xml_expected ='''<?xml version='1.0' encoding='utf-8'?>
<document>
  <head id="test">
    <metadata generation="edictor_internal">
      <meta>
        <n>Document Name</n>
        <v>test</v>
      </meta>
      <meta>
        <n>XML generated by</n>
        <v>%s</v>
      </meta>
      <meta>
        <n>Last Saved Date</n>
        <v>%s</v>
      </meta>
      <meta>
        <n>Word Count</n>
        <v>16</v>
      </meta>
    </metadata>
  </head>
  <body>
    <text t="full" words="16" id="text_1">
      <sc id="sc_1">
        <p id="p_1">
          <s id="s_1">
            <w id="1">
              <o>Test</o>
            </w>
            <w id="2">
              <o>unit</o>
            </w>
            <w id="3">
              <o>001</o>
            </w>
          </s>
        </p>
        <p id="p_2">
          <s id="s_2">
            <w id="4">
              <o>It</o>
            </w>
            <w id="5">
              <o>must</o>
            </w>
            <w id="6">
              <o>generate</o>
            </w>
            <w id="7">
              <o>two</o>
            </w>
            <w id="8">
              <o>paragraphs</o>
            </w>
            <w id="9">
              <o>.</o>
            </w>
          </s>
          <s id="s_3">
            <w id="10">
              <o>The</o>
            </w>
            <w id="11">
              <o>second</o>
            </w>
            <w id="12">
              <o>with</o>
            </w>
            <w id="13">
              <o>two</o>
            </w>
            <w id="14">
              <o>sentences</o>
            </w>
            <w id="15">
              <o>xxx</o>
            </w>
            <w id="16">
              <o>.</o>
            </w>
          </s>
        </p>
      </sc>
    </text>
  </body>
</document>
'''%('E-Dictor-v'+str(__builtin__.version), time.strftime('%d.%m.%Y', time.localtime()))

            self.output.write(_(u'Teste 001...\n'))
            
            self.output.write(_(u'   Testando inclusão de texto puro e gravação em ')+self.tmp_dir+'test.txt.\n')
            while self.main_frame.notebook_1.GetCurrentPage().GetId() != MainFrame.ID_TAB_REP:
                self.main_frame.notebook_1.AdvanceSelection()
            self.main_frame.text_ctrl_ocr.ChangeValue(\
                'Test unit 001\n\nIt must generate two paragraphs.\nThe second with two sentences xxx.')
            # Save TXT
            path = self.tmp_dir+'test.txt'
            self.main_frame.text_ctrl_ocr.SaveFile(path)

            if txt_expected.splitlines(1) == open(path,'r').readlines():
                self.output.write('   TXT Ok? ' + str(txt_expected.splitlines(1) == open(path,'r').readlines()) + '\n')
            else:
                self.output.write('   TXT Ok? False\n')
                for d in list(self.diff.compare(txt_expected.splitlines(1), open(path,'r').readlines())):
                    if d.startswith('+') or d.startswith('-'):
                        self.output.write('   ' + d)
                raise Exception(_(u'Teste 001: problemas no TXT gerado.'))
            
            # Open the TXT file
            self.main_frame.Refresh()

            self.output.write(_(u'   Testando reabertura do arquivo ')+self.tmp_dir+'test.txt.\n')
            self.main_frame.text_ctrl_ocr.ChangeValue('')
            self.main_frame.text_ctrl_ocr.LoadFile(path)

            # Transform to XML
            self.output.write(_(u'   Testando transformação em XML.\n'))
            self.main_frame.OnText2XML(None)

            # Save XML
            self.output.write(_(u'   Testando gravação do documento XML em ')+self.tmp_dir+'test.xml.\n')
            path = self.tmp_dir+'test.xml'
            prefix = os.path.basename(path)
            prefix = os.path.splitext(prefix)[0]
            self.main_frame.graphy.setPrefix(prefix)
            self.main_frame.graphy.SaveXMLFile(path)

            if xml_expected.splitlines(1) == open(path,'r').readlines():
                self.output.write('   XML Ok? ' + str(xml_expected.splitlines(1) == open(path,'r').readlines()) + '\n')
            else:
                self.output.write('   XML Ok? False\n')
                for d in list(self.diff.compare(xml_expected.splitlines(1), open(path,'r').readlines())):
                    if d.startswith('+') or d.startswith('-'):
                        self.output.write('   ' + d)
                raise Exception(_(u'Teste 001: problemas no XML gerado.'))

            # Open the XML file
            self.main_frame.graphy_text_html_window.SetPage('')

            self.output.write(_(u'   Testando reabertura do documento ')+self.tmp_dir+'test.xml.\n')
            self.main_frame.graphy = Graphy()
            self.main_frame.graphy_cell = None
            self.main_frame.graphy_word_editing = None
            self.main_frame.GetToolBar().ToggleTool(MainFrame.ID_ED_MODE, False)
            self.main_frame.ClearGraphyView()
            self.main_frame.graphy.OpenXMLFile(path)
            self.main_frame.LoadPage(1)
            self.main_frame.graphy_file_path = path
            for tool_id in self.main_frame.toolbar_ed:
                self.main_frame.GetToolBar().EnableTool(tool_id, True)
            
            return True
        except:
            print _(u'*** Teste 001 falhou!\n')
            raise
        return False
    
    def test002(self):
        '''
        Check word and page browsing, try out some editions
        to words, insert breaks (of all sorts) and try the
        conjoining (and unjoining) of words with breaks inside.
        '''
        try:
            xml_expected ='''<?xml version='1.0' encoding='utf-8'?>
<document>
  <head id="test">
    <metadata generation="edictor_internal">
      <meta>
        <n>Document Name</n>
        <v>test</v>
      </meta>
      <meta>
        <n>XML generated by</n>
        <v>%s</v>
      </meta>
      <meta>
        <n>Last Saved Date</n>
        <v>%s</v>
      </meta>
      <meta>
        <n>Word Count</n>
        <v>15</v>
      </meta>
    </metadata>
  </head>
  <body>
    <text t="full" words="15" id="text_1">
      <sc id="sc_1">
        <p id="p_1">
          <s id="s_1">
            <w id="1" t="enm" l="turkish">
              <o>Test</o>
              <e t="mod">Test-mod</e>
            </w>
            <w id="2">
              <o fon="true">unit<bk t="p" id="bk_1"><sce t="footer" id="sce_1"><te t="pgn" id="te_1"><w id="17"><o>001</o><f>001-fon</f></w></te></sce></bk></o>
            </w>
          </s>
        </p>
        <p id="p_2">
          <s id="s_2">
            <w id="4">
              <o>It</o>
            </w>
            <w id="5">
              <o>must</o>
            </w>
            <w id="6">
              <o>generate<bk t="line" id="bk_2"/></o>
            </w>
            <w id="7">
              <o>two</o>
            </w>
            <w id="8">
              <o>paragraphs<bk t="column" id="bk_3"/></o>
            </w>
            <w id="9">
              <o>.</o>
            </w>
          </s>
          <s id="s_3">
            <w id="10">
              <o>The<bk t="page" id="bk_5"/></o>
            </w>
            <w id="18">
              <o>second</o>
            </w>
            <w id="12">
              <o>with</o>
            </w>
            <w id="13">
              <o>two</o>
            </w>
            <w id="14">
              <o>sentences</o>
            </w>
            <w id="15">
              <o>xxx</o>
            </w>
          </s>
        </p>
      </sc>
    </text>
  </body>
</document>
'''%('E-Dictor-v'+str(__builtin__.version), time.strftime('%d.%m.%Y', time.localtime()))


            self.output.write(_(u'Teste 002...\n'))
            
            self.output.write(_(u'   Testa o início do modo de edição, indo 3 palavras pra frente, voltando duas e indo uma.\n'))

            # Continues with the file created on test 001
            self.main_frame.turnOnEdition()

            # Move forward and back
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdPrevWord(None)
            self.main_frame.OnMenuDocEdPrevWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            
            self.output.write(_(u'   Teste: desligar modo de edição, ligar novamente e transformar a palavra em número de página.\n'))

            self.main_frame.turnOffEdition()
            
            # Set '001' as Page Number
            self.main_frame.turnOnEdition()
            if self.main_frame.graphy.getTexts()[self.main_frame.active_text].setWordAsPageNumber(self.main_frame.graphy_word_editing,\
                                                                    True):
                self.main_frame.turnOffEdition()
                self.main_frame.ReloadCurrentPage()
                self.main_frame.graphy_word_editing = None

            self.output.write(_(u'   Teste de inserção de modernização, mudança de propriedades da palavra, marcarção de <o> como "fon" e versão fonológica.\n'))

            # Edit first word: insert modernization and change properties
            self.main_frame.turnOnEdition()
            self.main_frame.textEditedWord.ChangeValue(self.main_frame.graphy_word_editing.getString()+'-mod')
            self.main_frame.textEditionType.ChangeValue(_(u'Modernização'))
            self.main_frame.listEditions.Insert(self.main_frame.textEditedWord.GetValue()+ \
                                                ' | '+self.main_frame.textEditionType.GetValue(), 0)
            self.main_frame.comboWordType.SetStringSelection('enm')
            self.main_frame.textWordLang.ChangeValue('turkish')
            self.main_frame.OnBtnApplyChangesClicked(None)
            
            # Edition goes to second word: set Original As Phonological to True
            self.main_frame.checkFonOriginal.SetValue(True)
            self.main_frame.OnBtnApplyChangesClicked(None)

            # Edition is on the third word (Page Number): change phonological form
            self.main_frame.textFonWord.ChangeValue(self.main_frame.graphy_word_editing.getString()+'-fon')            
            self.main_frame.OnBtnApplyChangesClicked(None)
            
            self.output.write(_(u'   Teste de inserção de quebras de linha (com número), coluna e página (com cab./rod.).\n'))

            # Move two words ahead and insert a line break
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.graphy_word_editing.insertBreak(self.main_frame.graphy_word_editing.getString()+'|', 'line', ['line_nr'], '1')
            self.main_frame.ReloadCurrentPage()
            self.main_frame.turnOnEdition()

            # Move two words ahead and insert a column break
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.graphy_word_editing.insertBreak(self.main_frame.graphy_word_editing.getString()+'|', 'column', [], '')
            self.main_frame.ReloadCurrentPage()
            self.main_frame.turnOnEdition()

            # Move two words ahead and insert a page break with header and footer
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.graphy_word_editing.insertBreak(self.main_frame.graphy_word_editing.getString()+'|', 'page', [], '')
            self.main_frame.graphy.getTexts()[self.main_frame.active_text].processPages()
            self.main_frame.ReloadCurrentPage()
            self.main_frame.turnOnEdition()

            # Try to move forward and back again
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdPrevWord(None)

            # Remove page break
            self.main_frame.OnMenuDocEdRemoveBreak(None)

            # Insert it again
            self.main_frame.graphy_word_editing.insertBreak(self.main_frame.graphy_word_editing.getString()+'|', 'page', [], '')
            self.main_frame.graphy.getTexts()[self.main_frame.active_text].processPages()
            self.main_frame.ReloadCurrentPage()
            self.main_frame.turnOnEdition()
            
            self.output.write(_(u'   Teste: mover palavra (em fronteira de sentença) para frente e para trás novamente.\n'))

            # Move forward and back
            self.main_frame.OnMenuDocEdWordMoveForward(None)
            self.main_frame.OnMenuDocEdWordMoveBack(None)

            self.output.write(_(u'   Teste: juntar a palavra com quebra de página com a próxima e desjuntar.\n'))

            # Try to join the word with a page break with the next word
            self.main_frame.textEditedWord.ChangeValue(self.main_frame.graphy_word_editing.getString()+''+self.main_frame.graphy.getTexts()[self.main_frame.active_text].getNextWord(self.main_frame.graphy_word_editing).getString())
            self.main_frame.textEditionType.ChangeValue(_(u'Junção'))
            self.main_frame.listEditions.Insert(self.main_frame.textEditedWord.GetValue()+ \
                                                ' | '+self.main_frame.textEditionType.GetValue(), 0)
            self.main_frame.OnBtnApplyChangesClicked(None)
            
            # Undo the joining
            self.main_frame.OnMenuDocEdPrevWord(None)
            self.main_frame.remove_list.append('jun')
            self.main_frame.listEditions.Clear()
            self.main_frame.OnBtnApplyChangesClicked(None)

            self.output.write(_(u'   Teste de exclusão de palavra.\n'))

            # Try exclusion of the last word
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdRemoveWord(None)
            
            self.output.write(_(u'   Teste de navegação por páginas.\n'))

            # Move across pages
            self.main_frame.OnButtonPageGoToFirst(None)
            self.main_frame.OnButtonPageGoToNext(None)
            self.main_frame.OnButtonPageGoToPrevious(None)
            self.main_frame.OnButtonPageGoToLast(None)
            self.main_frame.GoToPageNumber(2)

            self.output.write(_(u'   Salva o arquivo e compara com a forma esperada.\n'))

            # Save file and compare
            path = self.tmp_dir+'test.xml'
            prefix = os.path.basename(path)
            prefix = os.path.splitext(prefix)[0]
            self.main_frame.graphy.setPrefix(prefix)
            self.main_frame.graphy.SaveXMLFile(path)

            if xml_expected.splitlines(1) == open(path,'r').readlines():
                self.output.write('   XML Ok? ' + str(xml_expected.splitlines(1) == open(path,'r').readlines()) + '\n')
            else:
                self.output.write('   XML Ok? False\n')
                for d in list(self.diff.compare(xml_expected.splitlines(1), open(path,'r').readlines())):
                    if d.startswith('+') or d.startswith('-'):
                        self.output.write('   ' + d)
                raise Exception(_(u'Teste 002: problemas no XML gerado.'))

            return True
        except:
            print _(u'*** Teste 002 falhou!')
            self.output.write(str(sys.exc_info()[0]) + ':' + str(sys.exc_info()[1]) + '\n')
            traceback.print_tb(sys.exc_info()[2], 2, self.output)
        return False
    
    def test003(self):
        '''
        Text insertion and paragraph/sentece merge, break and
        remove.
        '''
        try:
            self.output.write(_(u'Teste 003...\n'))
            
            xml_expected ='''<?xml version='1.0' encoding='utf-8'?>
<document>
  <head id="test">
    <metadata generation="edictor_internal">
      <meta>
        <n>Document Name</n>
        <v>test</v>
      </meta>
      <meta>
        <n>XML generated by</n>
        <v>%s</v>
      </meta>
      <meta>
        <n>Last Saved Date</n>
        <v>%s</v>
      </meta>
      <meta>
        <n>Word Count</n>
        <v>41</v>
      </meta>
      <meta>
        <n>Campo edictor_internal</n>
        <v>Teste do metadado</v>
      </meta>
    </metadata>
  </head>
  <body>
    <text t="full" words="41" id="text_1">
      <sc id="sc_1">
        <p id="p_1">
          <s id="s_1">
            <w id="1" t="enm" l="turkish">
              <o>Test</o>
              <e t="mod">Test-mod</e>
            </w>
            <w id="2">
              <o fon="true">unit<bk t="p" id="bk_1"><sce t="footer" id="sce_1"><te t="pgn" id="te_1"><w id="17"><o>001</o><f>001-fon</f></w></te></sce></bk></o>
            </w>
          </s>
        </p>
        <p id="p_2">
          <s id="s_2">
            <w id="4">
              <o>It</o>
            </w>
            <w id="5">
              <o>must</o>
            </w>
            <w id="6">
              <o>generate<bk t="line" id="bk_2"/></o>
            </w>
            <w id="7">
              <o>two</o>
            </w>
            <w id="8">
              <o>paragraphs<bk t="column" id="bk_3"/></o>
            </w>
            <w id="47">
              <o>.</o>
            </w>
          </s>
          <s id="s_6">
            <w id="22">
              <o>point</o>
            </w>
            <w id="23">
              <o>in</o>
            </w>
            <w id="24">
              <o>the</o>
            </w>
            <w id="25">
              <o>tests</o>
            </w>
            <w id="26">
              <o>,</o>
            </w>
            <w id="27">
              <o>this</o>
            </w>
            <w id="28">
              <o>fragment</o>
            </w>
          </s>
          <s id="s_7">
            <w id="29">
              <o>shall</o>
            </w>
            <w id="30">
              <o>be</o>
            </w>
            <w id="31">
              <o>inserted</o>
            </w>
            <w id="32">
              <o>,</o>
            </w>
            <w id="33">
              <o>because</o>
            </w>
            <w id="34">
              <o>we</o>
            </w>
            <w id="35">
              <o>need</o>
            </w>
            <w id="36">
              <o>to</o>
            </w>
            <w id="37">
              <o>test</o>
            </w>
            <w id="38">
              <o>the</o>
            </w>
            <w id="39">
              <o>last</o>
            </w>
            <w id="40">
              <o>routines</o>
            </w>
            <w id="41">
              <o>created</o>
            </w>
            <w id="42">
              <o>.</o>
            </w>
            <w id="43">
              <o>All</o>
            </w>
            <w id="44">
              <o>right</o>
            </w>
            <w id="45">
              <o>?</o>
            </w>
            <w id="46">
              <o>!</o>
            </w>
            <w id="9">
              <o>.</o>
            </w>
          </s>
          <s id="s_3">
            <w id="10">
              <o>The<bk t="page" id="bk_5"/></o>
            </w>
            <w id="18">
              <o>second</o>
            </w>
            <w id="12">
              <o>with</o>
            </w>
            <w id="13">
              <o>two</o>
            </w>
            <w id="14">
              <o>sentences</o>
            </w>
            <w id="15">
              <o>xxx</o>
            </w>
          </s>
        </p>
      </sc>
    </text>
  </body>
</document>
'''%('E-Dictor-v'+str(__builtin__.version), time.strftime('%d.%m.%Y', time.localtime()))

            self.output.write(_(u'   Testa inserção de texto.\n'))

            # Continues with the file created on test 001

            # Move to 'paragraph'
            self.main_frame.GoToPageNumber(2)
            self.main_frame.turnOnEdition()
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            
            self.main_frame.graphy_word_editing = self.main_frame.graphy.getTexts()[self.main_frame.active_text].insertText(\
                            self.main_frame.graphy_word_editing,
                            'and at some point in the tests, this fragment shall be inserted, because we need to test the last routines created.\n\nAll right?!',
                            1)
            self.main_frame.ReloadCurrentPage()
            self.main_frame.turnOnEdition()

            self.output.write(_(u'   Testa quebra de parágrafo.\n'))

            self.main_frame.graphy.getTexts()[self.main_frame.active_text].breakParagraph(self.main_frame.graphy_word_editing)
            self.main_frame.ReloadCurrentPage()

            self.output.write(_(u'   Testa fusão de parágrafos.\n'))

            self.main_frame.turnOnEdition()
            self.main_frame.graphy.getTexts()[self.main_frame.active_text].mergeElement('p_3')

            self.output.write(_(u'   Testa fusão de sentença.\n'))

            self.main_frame.graphy.getTexts()[self.main_frame.active_text].mergeElement('s_9')

            self.output.write(_(u'   Testa quebra de sentença.\n'))
            
            self.main_frame.turnOnEdition()
            for i in range(3):
                self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.graphy_word_editing = self.main_frame.graphy.getTexts()[self.main_frame.active_text].breakSentence(self.main_frame.graphy_word_editing)
            for i in range(7):
                self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.graphy_word_editing = self.main_frame.graphy.getTexts()[self.main_frame.active_text].breakSentence(self.main_frame.graphy_word_editing)
            self.main_frame.ReloadCurrentPage()

            self.output.write(_(u'   Testa remoção de sentença.\n'))

            self.main_frame.graphy_word_editing = None 
            self.main_frame.graphy.getTexts()[self.main_frame.active_text].removeElementByRef('s_10')
            self.main_frame.ReloadCurrentPage()
            self.main_frame.graphy.getTexts()[self.main_frame.active_text].removeElementByRef('s_11')
            self.main_frame.ReloadCurrentPage()

            self.output.write(_(u'   Modificações para voltar à forma original do documento.\n'))

            self.main_frame.turnOnEdition()
            for i in range(4):
                self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.graphy_word_editing = self.main_frame.graphy.getTexts()[self.main_frame.active_text].insertText(self.main_frame.graphy_word_editing, '.', 1)
            self.main_frame.ReloadCurrentPage()
            self.main_frame.turnOnEdition()
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdNextWord(None)
            self.main_frame.OnMenuDocEdRemoveWord(None)
            self.main_frame.OnMenuDocEdRemoveWord(None)
            self.main_frame.OnMenuDocEdRemoveWord(None)

            self.output.write(_(u'   Modificações nos metadados.\n'))

            metadata = self.main_frame.graphy.getMetadata()
            for key in metadata.keys():
                gen_meta = metadata[key]
                gen_meta.append((_(u'Campo ')+key,_(u'Teste do metadado')))
            self.main_frame.graphy.setMetadata(metadata)
                        
            self.output.write(_(u'   Salva o arquivo e compara com a forma esperada.\n'))

            # Save file and compare
            path = self.tmp_dir+'test.xml'
            prefix = os.path.basename(path)
            prefix = os.path.splitext(prefix)[0]
            self.main_frame.graphy.setPrefix(prefix)
            self.main_frame.graphy.SaveXMLFile(path)

            if xml_expected.splitlines(1) == open(path,'r').readlines():
                self.output.write('   XML Ok? ' + str(xml_expected.splitlines(1) == open(path,'r').readlines()) + '\n')
            else:
                self.output.write('   XML Ok? False\n')
                for d in list(self.diff.compare(xml_expected.splitlines(1), open(path,'r').readlines())):
                    if d.startswith('+') or d.startswith('-'):
                        self.output.write('   ' + d)
                raise Exception(_(u'Teste 003: problemas no XML gerado.'))

            return True
        except:
            print _(u'*** Teste 003 falhou!')
            self.output.write(str(sys.exc_info()[0]) + ':' + str(sys.exc_info()[1]) + '\n')
            traceback.print_tb(sys.exc_info()[2], 2, self.output)
            self.output.close()
        return False

    def test004(self):
        '''
        Test for Section break.
        '''
        try:
            self.output.write(_(u'Teste 004...\n'))
            
            xml_expected ='''<?xml version='1.0' encoding='utf-8'?>
<document>
  <head id="test">
    <metadata generation="edictor_internal">
      <meta>
        <n>Document Name</n>
        <v>test</v>
      </meta>
      <meta>
        <n>XML generated by</n>
        <v>%s</v>
      </meta>
      <meta>
        <n>Last Saved Date</n>
        <v>%s</v>
      </meta>
      <meta>
        <n>Word Count</n>
        <v>41</v>
      </meta>
      <meta>
        <n>Campo edictor_internal</n>
        <v>Teste do metadado</v>
      </meta>
    </metadata>
  </head>
  <body>
    <text t="full" words="41" id="text_1">
      <sc id="sc_1">
        <p id="p_1">
          <s id="s_1">
            <w id="1" t="enm" l="turkish">
              <o>Test</o>
              <e t="mod">Test-mod</e>
            </w>
            <w id="2">
              <o fon="true">unit<bk t="p" id="bk_1"><sce t="footer" id="sce_1"><te t="pgn" id="te_1"><w id="17"><o>001</o><f>001-fon</f></w></te></sce></bk></o>
            </w>
          </s>
        </p>
      </sc>
      <sc id="sc_2">
        <p id="p_2">
          <s id="s_2">
            <w id="4">
              <o>It</o>
            </w>
            <w id="5">
              <o>must</o>
            </w>
            <w id="6">
              <o>generate<bk t="line" id="bk_2"/></o>
            </w>
            <w id="7">
              <o>two</o>
            </w>
            <w id="8">
              <o>paragraphs<bk t="column" id="bk_3"/></o>
            </w>
            <w id="47">
              <o>.</o>
            </w>
          </s>
          <s id="s_6">
            <w id="22">
              <o>point</o>
            </w>
            <w id="23">
              <o>in</o>
            </w>
            <w id="24">
              <o>the</o>
            </w>
            <w id="25">
              <o>tests</o>
            </w>
            <w id="26">
              <o>,</o>
            </w>
            <w id="27">
              <o>this</o>
            </w>
            <w id="28">
              <o>fragment</o>
            </w>
          </s>
          <s id="s_7">
            <w id="29">
              <o>shall</o>
            </w>
            <w id="30">
              <o>be</o>
            </w>
            <w id="31">
              <o>inserted</o>
            </w>
            <w id="32">
              <o>,</o>
            </w>
            <w id="33">
              <o>because</o>
            </w>
            <w id="34">
              <o>we</o>
            </w>
            <w id="35">
              <o>need</o>
            </w>
            <w id="36">
              <o>to</o>
            </w>
            <w id="37">
              <o>test</o>
            </w>
            <w id="38">
              <o>the</o>
            </w>
            <w id="39">
              <o>last</o>
            </w>
            <w id="40">
              <o>routines</o>
            </w>
            <w id="41">
              <o>created</o>
            </w>
            <w id="42">
              <o>.</o>
            </w>
            <w id="43">
              <o>All</o>
            </w>
            <w id="44">
              <o>right</o>
            </w>
            <w id="45">
              <o>?</o>
            </w>
            <w id="46">
              <o>!</o>
            </w>
            <w id="9">
              <o>.</o>
            </w>
          </s>
          <s id="s_3">
            <w id="10">
              <o>The<bk t="page" id="bk_5"/></o>
            </w>
            <w id="18">
              <o>second</o>
            </w>
            <w id="12">
              <o>with</o>
            </w>
            <w id="13">
              <o>two</o>
            </w>
            <w id="14">
              <o>sentences</o>
            </w>
            <w id="15">
              <o>xxx</o>
            </w>
          </s>
        </p>
      </sc>
    </text>
  </body>
</document>
'''%('E-Dictor-v'+str(__builtin__.version), time.strftime('%d.%m.%Y', time.localtime()))

            self.output.write(_(u'   Testa quebra de seção.\n'))

            # Continues with the file created on test 001

            rt, msg = self.main_frame.graphy.getTexts()[self.main_frame.active_text].breakSection('p_2')
            if rt:
                 self.main_frame.ReloadCurrentPage()
            
            # Save file and compare
            path = self.tmp_dir+'test.xml'
            prefix = os.path.basename(path)
            prefix = os.path.splitext(prefix)[0]
            self.main_frame.graphy.setPrefix(prefix)
            self.main_frame.graphy.SaveXMLFile(path)

            if xml_expected.splitlines(1) == open(path,'r').readlines():
                self.output.write('   XML Ok? ' + str(xml_expected.splitlines(1) == open(path,'r').readlines()) + '\n')
            else:
                self.output.write('   XML Ok? False\n')
                for d in list(self.diff.compare(xml_expected.splitlines(1), open(path,'r').readlines())):
                    if d.startswith('+') or d.startswith('-'):
                        self.output.write('   ' + d)
                raise Exception(_(u'Teste 004: problemas no XML gerado.'))

            return True
        except:
            print _(u'*** Teste 004 falhou!')
            self.output.write(str(sys.exc_info()[0]) + ':' + str(sys.exc_info()[1]) + '\n')
            traceback.print_tb(sys.exc_info()[2], 2, self.output)
            self.output.close()
        return False    

    def test005(self):
        '''
        Test for Text break.
        '''
        try:
            # Expected output files content 
            txt_expected =u'''Test unit 001

It must generate two paragraphs.
The second with two sentences xxx.'''

            xml_expected ='''<?xml version='1.0' encoding='utf-8'?>
<document>
  <head id="test">
    <metadata generation="edictor_internal">
      <meta>
        <n>Document Name</n>
        <v>test</v>
      </meta>
      <meta>
        <n>XML generated by</n>
        <v>%s</v>
      </meta>
      <meta>
        <n>Last Saved Date</n>
        <v>%s</v>
      </meta>
      <meta>
        <n>Word Count</n>
        <v>16</v>
      </meta>
    </metadata>
  </head>
  <body>
    <text t="full" words="3" id="text_1">
      <sc id="sc_1">
        <p id="p_1">
          <s id="s_1">
            <w id="1">
              <o>Test</o>
            </w>
            <w id="2">
              <o>unit</o>
            </w>
            <w id="3">
              <o>005</o>
            </w>
          </s>
        </p>
      </sc>
    </text>
    <text id="text_2" words="13">
      <sc id="sc_2">
        <p id="p_2">
          <s id="s_2">
            <w id="4">
              <o>It</o>
            </w>
            <w id="5">
              <o>must</o>
            </w>
            <w id="6">
              <o>generate</o>
            </w>
            <w id="7">
              <o>two</o>
            </w>
            <w id="8">
              <o>paragraphs</o>
            </w>
            <w id="9">
              <o>.</o>
            </w>
          </s>
          <s id="s_3">
            <w id="10">
              <o>The</o>
            </w>
            <w id="11">
              <o>second</o>
            </w>
            <w id="12">
              <o>with</o>
            </w>
            <w id="13">
              <o>two</o>
            </w>
            <w id="14">
              <o>sentences</o>
            </w>
            <w id="15">
              <o>xxx</o>
            </w>
            <w id="16">
              <o>.</o>
            </w>
          </s>
        </p>
      </sc>
    </text>
  </body>
</document>
'''%('E-Dictor-v'+str(__builtin__.version), time.strftime('%d.%m.%Y', time.localtime()))

            self.output.write(_(u'Teste 005...\n'))
            
            self.output.write(_(u'   Criação de nova estrutura XML (idêntica ao teste 001).\n'))

            # Transform to XML
            self.main_frame.text_ctrl_ocr.ChangeValue(\
                'Test unit 005\n\nIt must generate two paragraphs.\nThe second with two sentences xxx.')
            self.main_frame.OnText2XML(None)
            self.main_frame.notebook_1.AdvanceSelection(False)
            path = self.tmp_dir+'test.xml'
            prefix = os.path.basename(path)
            prefix = os.path.splitext(prefix)[0]
            self.main_frame.graphy.setPrefix(prefix)
            self.main_frame.graphy.SaveXMLFile(path)

            self.output.write(_(u'   Testando quebra de texto.\n'))

            rt, msg = self.main_frame.graphy.getTexts()[self.main_frame.active_text].breakText('p_2', self.main_frame.graphy)
            if rt:
                self.main_frame.createDocumentTextsMenus()
                for m in self.main_frame.MenuDocSelText.GetMenuItems():
                    if self.main_frame.menu_opts[m.GetId()] == self.main_frame.active_text:
                        m.Check(True)
                        break
                self.main_frame.ReloadCurrentPage()
            else:
                raise Exception(_(u"Teste 005: erro na quebra de texto."))

            # Save XML
            self.output.write(_(u'   Testando gravação do documento XML em ')+self.tmp_dir+'test.xml.\n')
            path = self.tmp_dir+'test.xml'
            prefix = os.path.basename(path)
            prefix = os.path.splitext(prefix)[0]
            self.main_frame.graphy.setPrefix(prefix)
            self.main_frame.graphy.SaveXMLFile(path)

            if xml_expected.splitlines(1) == open(path,'r').readlines():
                self.output.write('   XML Ok? ' + str(xml_expected.splitlines(1) == open(path,'r').readlines()) + '\n')
            else:
                self.output.write('   XML Ok? False\n')
                for d in list(self.diff.compare(xml_expected.splitlines(1), open(path,'r').readlines())):
                    if d.startswith('+') or d.startswith('-'):
                        self.output.write('   ' + d)
                raise Exception(_(u'Teste 005: problemas no XML gerado.'))

            self.output.write(_(u'   Testando anternância entre textos.\n'))
            
            self.main_frame.turnOffEdition()
            self.main_frame.active_text = 1
            self.main_frame.GoToPageNumber(1)
            self.main_frame.setAppTitle()

            self.main_frame.turnOffEdition()
            self.main_frame.active_text = 0
            self.main_frame.GoToPageNumber(1)
            self.main_frame.setAppTitle()

            return True
        except:
            print _(u'*** Teste 005 falhou!')
            self.output.write(str(sys.exc_info()[0]) + ':' + str(sys.exc_info()[1]) + '\n')
            traceback.print_tb(sys.exc_info()[2], 2, self.output)
            self.output.close()
        return False
