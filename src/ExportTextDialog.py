# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Wed Jan 20 17:51:53 2010

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

class ExportTextDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ExportTextDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.sizer_77_staticbox = wx.StaticBox(self, -1, _(u"Opções"))
        self.label_34 = wx.StaticText(self, -1, _(u"Nível de edição:"))
        self.cbo_ed_level = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_33 = wx.StaticText(self, -1, _("Tipo de arquivo:"))
        self.cbo_file_type = wx.ComboBox(self, -1, choices=[_("Texto (TXT)"), _("Hipertexto (HTML)"), _(u"Hipertexto c/ área de fac-simile (HTML)")], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.chk_fono = wx.CheckBox(self, -1, _(u"Exportar forma fonológica (quando houver)"))
        self.chk_tools = wx.CheckBox(self, -1, _(u"Apenas elementos para análise automática"))
        self.chk_sentline = wx.CheckBox(self, -1, _(u"Exportar uma sentença por linha"))
        self.chk_do_break = wx.CheckBox(self, -1, _("Realizar quebras de linha"))
        self.chk_el_names = wx.CheckBox(self, -1, _(u"Não exportar nomes de elementos"))
        self.button_ok = wx.Button(self, -1, _("Ok"))
        self.button_cancel = wx.Button(self, -1, _("Cancelar"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.OnFileTypeChange, self.cbo_file_type)
        self.Bind(wx.EVT_CHECKBOX, self.OnAutoToolsClick, self.chk_tools)
        self.Bind(wx.EVT_CHECKBOX, self.OnChkSentlineClick, self.chk_sentline)
        self.Bind(wx.EVT_CHECKBOX, self.OnChkDoBreakClick, self.chk_do_break)
        self.Bind(wx.EVT_BUTTON, self.OnOkButtonClick, self.button_ok)
        self.Bind(wx.EVT_BUTTON, self.OnCancelButtonClick, self.button_cancel)
        # end wxGlade

        self.Bind(wx.EVT_CHAR_HOOK, self.OnKeyDown)
        
        # Variables for after-Ok access
        self.ed_level = None
        self.file_type = None
        self.options = []

        self.cbo_ed_level.SetFocus()

    def OnKeyDown(self, event):
        keycode = event.GetKeyCode()
        if keycode == wx.WXK_ESCAPE:
            self.Close(True)
        event.Skip()

    def __set_properties(self):
        # begin wxGlade: ExportTextDialog.__set_properties
        self.SetTitle(_("Exportar texto"))
        self.label_34.SetMinSize((122, 14))
        self.label_33.SetMinSize((122, 14))
        self.cbo_file_type.SetSelection(-1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ExportTextDialog.__do_layout
        sizer_74 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_77 = wx.StaticBoxSizer(self.sizer_77_staticbox, wx.VERTICAL)
        sizer_76 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_75 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_75.Add(self.label_34, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_75.Add(self.cbo_ed_level, 0, wx.ALL, 2)
        sizer_74.Add(sizer_75, 0, wx.EXPAND, 0)
        sizer_76.Add(self.label_33, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_76.Add(self.cbo_file_type, 0, wx.ALL, 2)
        sizer_74.Add(sizer_76, 0, wx.EXPAND, 0)
        sizer_77.Add(self.chk_fono, 0, 0, 0)
        sizer_77.Add(self.chk_tools, 0, 0, 0)
        sizer_77.Add(self.chk_sentline, 0, 0, 0)
        sizer_77.Add(self.chk_do_break, 0, 0, 0)
        sizer_77.Add(self.chk_el_names, 0, 0, 0)
        sizer_74.Add(sizer_77, 1, wx.EXPAND, 0)
        sizer_2.Add(self.button_ok, 1, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 30)
        sizer_2.Add(self.button_cancel, 1, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 30)
        sizer_74.Add(sizer_2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(sizer_74)
        sizer_74.Fit(self)
        self.Layout()
        # end wxGlade

    def OnOkButtonClick(self, event): # wxGlade: ExportTextDialog.<event_handler>
        self.ed_level = self.cbo_ed_level.GetStringSelection()
        self.file_type = self.cbo_file_type.GetCurrentSelection()
        if self.chk_fono.GetValue():
            self.options.append("PHONOLOGICAL_TEXT")
        if self.chk_sentline.GetValue():
            self.options.append("LINEBREAK_ON_SENTENCE")
        if self.chk_tools.GetValue():
            self.options.append("TOOLS_TEXT_ONLY")
        if self.chk_do_break.GetValue():
            self.options.append("DO_BREAKLINES")
        if not self.chk_el_names.GetValue():
            self.options.append("PRINT_EL_TYPE")
        # Close window
        self.EndModal(wx.ID_OK)

    def OnCancelButtonClick(self, event): # wxGlade: ExportTextDialog.<event_handler>
        self.ed_level = None
        self.file_type = None
        self.options = []
        self.EndModal(wx.ID_CANCEL)

    def setEditionLevels(self, ed_levels):
        ''' Configures the "Edition Level" combo box with the levels defined 
        in E-Dictor prefs. '''
        self.cbo_ed_level.Clear()
        self.cbo_ed_level.Append(_('Texto original'))
        for ed in ed_levels:
            self.cbo_ed_level.Append(ed)
        self.cbo_ed_level.Select(0)
        self.cbo_file_type.Select(0)

    def OnFileTypeChange(self, event): # wxGlade: ExportTextDialog.<event_handler>
        bool_vl = (self.cbo_file_type.GetStringSelection().find("TXT") >= 0 )
        self.chk_sentline.Enable(bool_vl)
        self.chk_fono.Enable(bool_vl)
        if not bool_vl: # Options not available for HTML format
            self.chk_sentline.SetValue(False)
            self.chk_fono.SetValue(False)
        if self.cbo_file_type.GetCurrentSelection() == 2:
            self.chk_el_names.SetValue(True)
            self.chk_el_names.Enable(False)
        else:
            self.chk_el_names.SetValue(False)
            self.chk_el_names.Enable(True)

    def OnChkSentlineClick(self, event): # wxGlade: ExportTextDialog.<event_handler>
        self.chk_do_break.Enable(not self.chk_sentline.GetValue())
        if self.chk_sentline.GetValue():
            self.chk_do_break.SetValue(False)

    def OnChkDoBreakClick(self, event): # wxGlade: ExportTextDialog.<event_handler>
        self.chk_sentline.Enable(not self.chk_do_break.GetValue())
        if self.chk_do_break.GetValue():
            self.chk_sentline.SetValue(False)

    def getEditionLevel(self):
        return self.ed_level

    def getFileType(self):
        return self.file_type

    def getOptions(self):
        return self.options

    def OnAutoToolsClick(self, event): # wxGlade: ExportTextDialog.<event_handler>
        self.chk_sentline.Enable(not self.chk_tools.GetValue())
        self.chk_do_break.Enable(not self.chk_tools.GetValue())
        self.chk_el_names.Enable(not self.chk_tools.GetValue())
        if self.chk_tools.GetValue():
            self.chk_sentline.SetValue(True)
            self.chk_do_break.SetValue(False)
            self.chk_el_names.SetValue(True)

# end of class ExportTextDialog


